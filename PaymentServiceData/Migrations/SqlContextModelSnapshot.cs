// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PaymentServiceData.Context;

namespace PaymentServiceData.Migrations
{
    [DbContext(typeof(SqlContext))]
    partial class SqlContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("PaymentServiceBusiness.Models.Key", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("varchar(1000)");

                    b.Property<int>("KeyType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Key");
                });

            modelBuilder.Entity("PaymentServiceBusiness.Models.Payer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("KeyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(1000)");

                    b.HasKey("Id");

                    b.HasIndex("KeyId");

                    b.ToTable("Payer");
                });

            modelBuilder.Entity("PaymentServiceBusiness.Models.Receiver", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("KeyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(1000)");

                    b.HasKey("Id");

                    b.HasIndex("KeyId");

                    b.ToTable("Receiver");
                });

            modelBuilder.Entity("PaymentServiceBusiness.Models.Transaction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("PayerId")
                        .HasColumnType("int");

                    b.Property<Guid>("PayerId1")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ReceiverId")
                        .HasColumnType("int");

                    b.Property<Guid>("ReceiverId1")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("TransactionDate")
                        .HasColumnType("date");

                    b.HasKey("Id");

                    b.HasIndex("PayerId1");

                    b.HasIndex("ReceiverId1");

                    b.ToTable("Transaction");
                });

            modelBuilder.Entity("PaymentServiceBusiness.Models.Payer", b =>
                {
                    b.HasOne("PaymentServiceBusiness.Models.Key", "Key")
                        .WithMany()
                        .HasForeignKey("KeyId");
                });

            modelBuilder.Entity("PaymentServiceBusiness.Models.Receiver", b =>
                {
                    b.HasOne("PaymentServiceBusiness.Models.Key", "Key")
                        .WithMany()
                        .HasForeignKey("KeyId");
                });

            modelBuilder.Entity("PaymentServiceBusiness.Models.Transaction", b =>
                {
                    b.HasOne("PaymentServiceBusiness.Models.Payer", "Payer")
                        .WithMany("Transactions")
                        .HasForeignKey("PayerId1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PaymentServiceBusiness.Models.Receiver", "Receiver")
                        .WithMany("Transactions")
                        .HasForeignKey("ReceiverId1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
